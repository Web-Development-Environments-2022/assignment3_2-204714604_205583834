openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
- name: Users
- name: Recipes
- name: Search

paths:
  /Register:
    post:
      tags:
      - Auth
      summary: register a user
      description: add new user to the database 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: user created

        '409':
          description: username taken
  
  /Login:
    post:
      tags:
      - Auth
      summary: login user
      description: check if user in database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDetails'
      responses:
        '200':
          description: login succeeded
        '401':
          description: Username or Password incorrect
  

  /Logout:
    post:
      tags:
      - Auth
      summary: logout user
      description: logout user using the db
      responses: 
        '200':
          description: login succeeded
  
  
  /recipes/recipeExtendedInfo/{recipe_id}:
    get:
      tags:
      - Recipes
      summary: get full recipe by id
      parameters:
      - name: recipe_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: 'recipe'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRecipe'
  
  /recipes/recipePreview:
    post:
      tags:
      - Recipes
      summary: show preview of recipe
      description: show preview of recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeId'
      responses: 
        '200':
          description: '#/components/schemas/Recipe'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'

  /recipes/random:
    post:
      tags:
      - Recipes
      summary: show 3 random recipes
      responses:
        '200':
          description: three random recipes
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/3Recipes'
    
  /recipes/addPrivateRecipe:
    post:
      tags:
      - Recipes
      summary: add private recipe
      responses:
        '200':
          description: The Recipe upload successful

          
  /users/favorites:
    post:
      tags:
      - Users
      summary: save to favorite
      description: save to favorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeId'
      responses: 
        '200':
          description: "The Recipe uploaded to favorite"


  /users/getFavorites:
    get:
      tags:
      - Users
      summary: get favorite recipes
      description: get favorite recipes
      responses: 
        '200':
          description: there is at least one favorite recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryRecipe'

  /users/getWatched:
    get:
      tags:
      - Users
      summary: show preview of recipe
      description: there is at least one recipe in history
      responses: 
        '200':
          description: '#/components/schemas/HistoryRecipe'


  /users/addWatched:
    post:
      tags:
      - Users
      summary: add to history table
      description: add to history table
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullRecipe'
      responses: 
        '200':
          description: Recipe recorded to history
          
  /users/Watched:
    post:
      tags:
      - Users
      summary: recored the history
      description: recored the history
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeId'
      responses: 
        '200':
          description: "The Recipe recorded in the history"


  /recipes/addrecipe:
    post:
      tags:
      - Recipes
      - Users
      summary: add recipe by specific user
      description: "add recipe by specific user"
      requestBody:
        content:
          application/json:
            schema:
              type: string
              $ref: '#/components/schemas/RecipeId'
        required: true
      
      responses:
        '200':
          description: "Recipe recorded to history"

      
  /users/logincheck:
    post:
      tags:
      - Users
      - Recipes
      summary: show preview of recipe
      description: logout user using the db
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeId'
      responses: 
        '200':
          description: "The login successful"
        '404':
          description:  "username or password not correct"


  /users/writtenby:
    get:
      tags:
      - Users
      - Recipes
      summary: show preview of recipe
      description: logout user using the db
      responses: 
        '200':
          description: '#/components/schemas/FullRecipesLst'

  /users//search/{query}/{number}/{cuisine}/{diet}/{intolerances}:
    get:
      tags:
      - Users
      - Recipes
      summary: search recipes
      description: search recipes using external API
      parameters:
      - name: query
        in: path
        required: true
        description: search query 
        schema:
          type: string
      - name: number
        required: true
        in: path
        description: number of results (5-15) 
        schema:
          type: integer
      - name: cuisine
        in: path
        description: is cuisin food needed or not
        required: true
        schema:
          type: string
      - name: diet
        in: path
        description:  diet food 
        required: true
        schema:
          type: string

      - name: intolerances
        in: path
        description: intolernces needed to be considered
        required: true
        schema:
         type: string
      responses: 
        '200':
          description: '#/components/schemas/SearchList'
  /users/getLastThreeViewed:
    get:
      tags:
      - Users
      - Recipes
      summary: show the last watched three recipes
      description: logout user using the db
      responses: 
        '200':
          description: '#/components/schemas/3LastViewdRecipes'


 
  
  
        
components:
  schemas:
    User:
      required: 
      - username
      - password
      - firstname
      - lastname
      - country
      - email
      - profilePic
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username in length of 3-8 chars
          example: TonyStark
        firstname:
          type: string
          description: user's first name
          example: Tony
        lastname:
          type: string
          description: user's last name
          example: Stark
        country:
          type: string
          description: user's country
          example: USA
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password in length of 5-10 chars at least one of them is a number and a special char
          format: password
          example: Iron@22Man
        email:
          type: string
          description: user's email
          format: email
          example: tony@starkIndustries.com
      description: Model of the user info
    
    LoginDetails:
      required:
      - username
      - password
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username in length of 3-8 chars
          example: TonyStark
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password in length of 5-10 chars at least one of them is a number and a special char
          format: password
          example: Iron@22Man
    
    Recipe:
      type: object
      properties:
        RecipeImg:
          type: string
          description: the name of the recipe
        RecipeName:
          type: string
          description: the image of the recipe
          format: url
        CookingTime:
          type: integer
          description: the cooking time
        GlutenFree:
          type: boolean
          description: is gluten free or not
        isVegan:
          type: boolean
          description: is vegan or not
        isVegetarian:
          type: boolean
          description: is vegeterian or not
        isCicked:
          type: boolean
          description: is clicked by the user or not
        isFavorite:
          type: boolean
          description: is Favorite by the user or not
    3Recipes:
      type: array
      description: "3 random recipes"
      minItems: 3
      maxItems: 3
      items: 
        $ref: '#/components/schemas/Recipe'

    3LastViewdRecipes:
      type: array
      description: "3 last viewed recipes"
      minItems: 3
      maxItems: 3
      items:
        $ref: '#/components/schemas/FullRecipe'

      
      
    FullRecipe:
      required:
      - RecipeImg
      - RecipeName
      - CookingTime
      - GlutenFree
      - isVegan
      - isVegetarian
      - isClicked
      - isFavorite
      - ingredients
      - instructions
      - servings
      type: object
      properties:
        RecipeImg:
          type: string
          description: the name of the recipe
        RecipeName:
          type: string
          description: the image of the recipe
          format: url
        CookingTime:
          type: integer
          description: the cooking time
        GlutenFree:
          type: boolean
          description: is gluten free or not
        isVegan:
          type: boolean
          description: is vegan or not
        isVegetarian:
          type: boolean
          description: is vegeterian or not
        isCicked:
          type: boolean
          description: is clicked by the user or not
        isFavorite:
          type: boolean
          description: is Favorite by the user or not
        ingredients:
          type: string
          description: the ingredients needed for the recipe
        instructions:
          type: string
          description: the instructions for the recipe
        servings:
          type: string
          description: the total servings of the recipe
        
    RecipeId:
        type: string
        
    SearchList:
      type: array
      minItems: 5
      maxItems: 15
      items: 
        $ref: '#/components/schemas/Recipe'
    HistoryRecipe:
      type: array
      minItems: 5
      maxItems: 15
      items: 
        $ref: '#/components/schemas/FullRecipe'
    
    FullRecipesLst:
      type: array
      items: 
        $ref: '#/components/schemas/FullRecipe'